# -*- coding: utf-8 -*-
"""YOLOv3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_XPkUZAvBqm1lE98NiFhTLXKTQvXTa_y
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

net = cv2.dnn.readNet('/content/drive/MyDrive/YOLO/yolov3.weights', '/content/drive/MyDrive/YOLO/yolov3.cfg')

classes = []
with open('/content/drive/MyDrive/YOLO/classes.txt', "r") as f:
    classes = f.read().splitlines()

print(classes)

# to capture the video
cap = cv2.VideoCapture('/content/drive/MyDrive/YOLO/Videos/V2.mp4')
font = cv2.FONT_HERSHEY_PLAIN
colors = np.random.uniform(0, 255, size=(100, 3))

img = cv2.imread('/content/drive/MyDrive/YOLO/Images/amazon-india-office.jpg')
height, width, _ = img.shape

# preparing the blob image BGR TO RGB
blob = cv2.dnn.blobFromImage(img, 1/255, (416, 416), (0,0,0), swapRB=True, crop=False)

#we view the image inputted
cv2_imshow(img)

#here we give the blob as the input to the network
net.setInput(blob)
output_layers_names = net.getUnconnectedOutLayersNames()

#we pass the output_layers_names in the forward propagation
layerOutputs = net.forward(output_layers_names)

# here we create lists to store boxes, their confidences and the respective class ids identified
boxes = []
confidences = []
class_ids = []

for output in layerOutputs:
    for detection in output:
        scores = detection[5:]
        class_id = np.argmax(scores)
        confidence = scores[class_id]
        if confidence > 0.2:
            center_x = int(detection[0]*width)
            center_y = int(detection[1]*height)
            w = int(detection[2]*width)
            h = int(detection[3]*height)

            x = int(center_x - w/2)
            y = int(center_y - h/2)

            boxes.append([x, y, w, h])
            confidences.append((float(confidence)))
            class_ids.append(class_id)


#this non maximum suppression only keeps the boxes with highest of the probabilities
indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.2, 0.4)

# we itearte in the indexes.flatten list to assign and create boxes in the image
if len(indexes)>0:
    for i in indexes.flatten():
        x, y, w, h = boxes[i]
        label = str(classes[class_ids[i]])
        confidence = str(round(confidences[i],2))
        color = colors[i]
        cv2.rectangle(img, (x,y), (x+w, y+h), color, 2)
        cv2.putText(img, label + " " + confidence, (x, y+20), font, 2, (255,255,255), 2)

cv2_imshow(img)

while True:
    _, img = cap.read()
    height, width, _ = img.shape

    blob = cv2.dnn.blobFromImage(img, 1/255, (416, 416), (0,0,0), swapRB=True, crop=False)
    net.setInput(blob)
    output_layers_names = net.getUnconnectedOutLayersNames()
    layerOutputs = net.forward(output_layers_names)

    boxes = []
    confidences = []
    class_ids = []

    for output in layerOutputs:
        for detection in output:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.2:
                center_x = int(detection[0]*width)
                center_y = int(detection[1]*height)
                w = int(detection[2]*width)
                h = int(detection[3]*height)

                x = int(center_x - w/2)
                y = int(center_y - h/2)

                boxes.append([x, y, w, h])
                confidences.append((float(confidence)))
                class_ids.append(class_id)

    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.2, 0.4)

    if len(indexes)>0:
      for i in indexes.flatten():
          x, y, w, h = boxes[i]
          label = str(classes[class_ids[i]])
          confidence = str(round(confidences[i],2))
          color = colors[i]
          cv2.rectangle(img, (x,y), (x+w, y+h), color, 2)
          cv2.putText(img, label + " " + confidence, (x, y+20), font, 2, (255,255,255), 2)

    cv2_imshow(img)
    key = cv2.waitKey(1)
    if key==27:
        break
cap.release()